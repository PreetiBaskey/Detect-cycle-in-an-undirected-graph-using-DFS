#include<bits/stdc++.h>
using namespace std;

const int V = 4;

bool DFS(vector<int> adj[], vector<int> &visited, int node, int parent) {
    visited[node] = 1;
    
    for(int neighbour: adj[node]) {
        if(!visited[neighbour]) {
            visited[neighbour] = 1;
            if(DFS(adj, visited, neighbour, node)) return true;
        }
        else if(parent != neighbour) {
            return true;
        }
    }
    return false;
}

void addEdge(vector<int> adj[], int source, int destination) {
    adj[source].push_back(destination);
    adj[destination].push_back(source);
}

int main() {
    
    vector<int> adj[V];
    
    addEdge(adj, 0, 1);
    addEdge(adj, 0, 2);
    addEdge(adj, 0, 3);
    addEdge(adj, 1, 2);
    
    vector<int> visited(V, 0);
    int parent = -1;
    bool result;
    
    for(int i = 0; i < V; i++) {
        if(!visited[i]) {
            if(DFS(adj, visited, i, parent)) {
                result = true;
            }
            else result = false;
        }
    }
    
    if(result) cout<<"Cycle detected in an undirected graph !!"<<endl;
    else cout<<"Cycle not detected in an undirected graph !!"<<endl;
    return 0;
}